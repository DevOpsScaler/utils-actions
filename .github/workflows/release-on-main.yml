name: Release on main (semantic bump)

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  release:
    if: github.actor != 'github-actions[bot]' # prevent loop
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Configure Git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Determine previous tag and current version
        id: base
        shell: bash
        run: |
          set -euo pipefail
          LAST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          echo "last_tag=$LAST_TAG" >> "$GITHUB_OUTPUT"
          DEFAULT_VERSION="0.1.0"

          if [[ -n "${LAST_TAG}" ]]; then
            CURR_VERSION="${LAST_TAG#v}"
          elif [[ -f VERSION ]]; then
            CURR_VERSION="$(tr -d '[:space:]' < VERSION)"
            [[ -z "$CURR_VERSION" ]] && CURR_VERSION="$DEFAULT_VERSION"
          else
            CURR_VERSION="$DEFAULT_VERSION"
          fi
          echo "curr_version=$CURR_VERSION" >> "$GITHUB_OUTPUT"

      - name: Collect commits since last tag
        id: commits
        shell: bash
        run: |
          set -euo pipefail
          LAST_TAG="${{ steps.base.outputs.last_tag }}"
          if [[ -n "$LAST_TAG" ]]; then
            RANGE="${LAST_TAG}..HEAD"
          else
            RANGE="--since=1970-01-01"
          fi

          SUBJECTS="$(git log --format=%s $RANGE || true)"
          BODIES="$(git log --format=%B $RANGE || true)"

          {
            echo "subjects<<__SUB__"
            echo "$SUBJECTS"
            echo "__SUB__"
            echo "bodies<<__BOD__"
            echo "$BODIES"
            echo "__BOD__"
          } >> "$GITHUB_OUTPUT"

      - name: Decide bump (major/minor/patch/none)
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          subjects="${{ steps.commits.outputs.subjects }}"
          bodies="${{ steps.commits.outputs.bodies }}"

          shopt -s nocasematch
          bump="none"

          # major if 'type!:' or 'BREAKING CHANGE:' in body
          if echo "$subjects" | grep -qE '^(infra|deploy|feat|fix|chore|style|refactor|docs|test|ci|perf|build)!:' || \
             echo "$bodies"   | grep -q 'BREAKING CHANGE:' ; then
            bump="major"
          elif echo "$subjects" | grep -qE '^(feat)(\([^)]+\))?:'; then
            bump="minor"
          elif echo "$subjects" | grep -qE '^(infra|deploy|fix|chore|style|refactor|docs|test|ci|perf|build)(\([^)]+\))?:'; then
            bump="patch"
          else
            bump="none"
          fi

          echo "bump=$bump" >> "$GITHUB_OUTPUT"
          echo "Detected bump: $bump"

      - name: Compute next version
        id: next
        if: steps.bump.outputs.bump != 'none'
        shell: bash
        run: |
          set -euo pipefail
          curr="${{ steps.base.outputs.curr_version }}"
          bump="${{ steps.bump.outputs.bump }}"

          IFS='.' read -r MA MI PA <<< "$curr"
          MA=${MA:-0}; MI=${MI:-0}; PA=${PA:-0}

          case "$bump" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch) PA=$((PA+1)) ;;
          esac

          next="${MA}.${MI}.${PA}"
          echo "next=$next" >> "$GITHUB_OUTPUT"
          echo "$next" > VERSION

      - name: Commit VERSION (skip CI)
        if: steps.bump.outputs.bump != 'none'
        run: |
          set -euo pipefail
          git add VERSION
          git commit -m "ci(release): bump version to ${{ steps.next.outputs.next }} [skip ci]" || echo "No changes to commit"

      - name: Push version commit
        if: steps.bump.outputs.bump != 'none'
        run: git push

      - name: Create & push tag
        if: steps.bump.outputs.bump != 'none'
        run: |
          set -euo pipefail
          v="v${{ steps.next.outputs.next }}"
          git tag "$v" -m "Release $v"
          git push origin "$v"

      - name: Create GitHub Release (optional)
        if: steps.bump.outputs.bump != 'none'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          v="v${{ steps.next.outputs.next }}"
          api="https://api.github.com/repos/${{ github.repository }}/releases"
          curl -sS -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$api" \
            -d @- <<JSON
          {
            "tag_name": "$v",
            "name": "$v",
            "body": "Automated release for $v",
            "draft": false,
            "prerelease": false,
            "generate_release_notes": true
          }
JSON
